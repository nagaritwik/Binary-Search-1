// Time Complexity :O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high = nums.length-1;
        int mid;
        
        if(nums==null || nums.length==0)
            return -1;
        while(low<=high)
        {
            mid = low+(high-low);  // This helps us to avoid integer overflow.
            
            if(target==nums[mid]){ // base condition
                return mid;
                
            }else if(nums[low]<=nums[mid]){// Shows that the left side of the array is from low to mid is sorted
                if(target<=nums[mid]&& target>=nums[low]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            } else{ // Shows that the right side of the mid is array from mid to high is sorted
                if(target>=nums[mid]&& target<=nums[high]){
                    low=mid+1;
                }else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }
}
